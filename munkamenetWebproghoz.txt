--Laravel projekt létrehozása + autentikáció
	cd desktop
	composer create-project --prefer-dist laravel/laravel Kizolditjuk
	composer require laravel/breeze --dev

--ab létrehozása + env
 
	npm install
	npm run dev

--controllerek / modellek / migrációk létrehozása

	php artisan make:model Todo -mcr /Migration/Controller/R?

--modellek feltöltése jó adattagokkal

	 protected $table = 'Tablaneve';
	    protected $primaryKey = 'id';
	    protected $keyType = 'int';
	    public $timestamps = false;
	    protected $fillable = [
		'osszes',
		'oszlop',
		'felsorolasa'
	    ];
    
--controller függvények kitöltése ! Use App\Models\Model!!!

	index()
	$tablaneve = Tablaneve::all();
	return $tablaneve;

	store($request)
	$tablaneve = new Tablaneve
	$kategoriak->id = $request->id;
	$tablaneve->save();

	show($id)
	$tablaneve = Tablaneve::find($id)
	return response()->json($tablaneve);

	update($request, $id)
	$tablaneve = Tablaneve::find($id)
	$tablaneve->id = $request->id;
	$tablaneve->save();

	destroy($id)
	$tablaneve = Tablaneve::find($id)
	$tablaneve->delete();

--seeder vagy localhoston belül próba adatok

	-- Tábal elkészítése Migrationben
	
	$table->smallIncrements('id');
	...
	$table->unsignedSmallInteger('kategoria');
	...
	$table->foreign('kategoria')->references('id')->on('kategoriak'); <-- Külső kulcs
	
	Ingatlanok::create(["id" => "1", "kategoria" => "1"]); <-- Egy sor adatokkal létrehozása


--API-k létrehozása

Route::get('/api/kategoriak', [KategoriakController::class, 'index']); <-- összeset lekéri
Route::get('/api/kategoria/{id}', [KategoriakController::class, 'show']); <-- ID alapján 1-et lekér
Route::post('/api/kategoria', [KategoriakController::class, 'store']); <-- feltölt újat
Route::put('/api/kategoria/{id}', [KategoriakController::class, 'update']); <-- módosít meglévőt ID alapján
Route::delete('/api/kategoria/{id}', [KategoriakController::class, 'destroy']); <-- Töröl meglévőt ID alapján

Route::get('/api/ingatlanok/expand', [IngatlanokController::class, 'expandAll']); <-- Külső kulcs adatokat is mutat. Ehhez még szükséges:

Modelben aminek van külső kulcsa:
(pl. Az Ingatlanokhoz adom hozzá a kategóriát)

public function kategoria(){ <-- Erre hivatkozok majd a Controllerben

        return $this->hasMany(Kategoriak::class, 'id', 'id'); <-- id1: külső kulcs, id2: amire mutat
    }
    
Controllerben

public function expandAll()
    {
        $ingatlanok = Ingatlanok::with('kategoria')->get();
        return $ingatlanxok;
    }


--weboldalak elkészítése, html css js

--ajax.js Ajax oszály

----TOKENEK----
Ajax osztályban:

class Ajax {
    constructor(token) {
        this.token = token;
    }
    
HTML-ben: <meta name="csrf-token" content=<?php $token = csrf_token();?>>

JS-ben:

const token = $('meta[name="csrf-token"]').attr("content");
const ajax = new Ajax(token);
const apivegpont = "http://localhost:8000/api";

-- AJAX HÍVÁSOK --

ajaxApiGet(apivegpont, callback) {
        $.ajax({
            url: apivegpont,
            type: "GET",
            success: function (result) {
                callback(result);
            },
        });
    }

    ajaxApiPut(apivegpont, id, data) {
        $.ajax({
            headers:{'X-CSRF-TOKEN':this.token},
            url: apivegpont + "/" + id,
            type: "PUT",
            data: data,
        });
    }

    ajaxApiDelete(apivegpont, id) {
        $.ajax({
            headers:{'X-CSRF-TOKEN':this.token},
            url: apivegpont + "/" + id,
            type: "DELETE"
        });
    }

    ajaxApiPost(apivegpont, data) {
        $.ajax({
            headers:{'X-CSRF-TOKEN':this.token},
            url: apivegpont,
            type: "POST",
            data: data,
        });
    }
    


--formok létrehozása

--js fájlok megírása API-kkal
